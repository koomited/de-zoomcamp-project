version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - 22181:2181
    env_file:
      - ./.env

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
      - "29092:29092"
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "bash", "-c", "unset" , "JMX_PORT" ,";" ,"kafka-topics.sh","--zookeeper","zookeeper:2181","--list"]
  #storage with minio
  minio:
    image: quay.io/minio/minio
    ports:
      - "9006:9000"
      - "9005:9001"
    env_file:
      - ./.env
    # volumes:
    #   - 'minio_data:/data'
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5  
  #We need to wait until kafka ends. 
  coinbase-fetcher:
    build: 
      context: ./coinbase-fetcher
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
  #We need to wait until kafka ends. 
  kafka-to-minio:
    build: 
      context: ./kafka-to-minio
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - ./.env
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
  kafka-postgres:
    build: 
      context: ./kafka-postgres
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
  postgres:
    build: 
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin: 
    image: dpage/pgadmin4
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: koomi@aims.ac.za
      PGADMIN_DEFAULT_PASSWORD: koomi
networks:
  default:
    driver: bridge
volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local